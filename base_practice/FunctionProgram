# 类比于Rx-java


# map 将第一个参数的函数作用于另一个参数的每个元素，结果作为新的Iterator返回
def add(x):
    return x * 2


r = map(add, range(5))

print(list(r))

# reduce 将一个函数(必须两个参数)作用于序列的某个元素，并将结果和序列的下一个元素作为函数的参数继续运算

# ex:求和
from functools import reduce


def sum(x, y):
    return x + y


sum_result = reduce(sum, [1, 3, 5, 7, 9])
print(sum_result)


# 是否时回数，我写的...心塞
def ishui(number):
    s_num = list(str(number))
    result = len(s_num) // 2
    for i in range(result):
        if s_num[i] != s_num[-(i + 1)]:
            return False
        else:
            continue
    return True


# 别人的判断回数，妈的
def is_palindrome(n):
    old = str(n)
    new = old[::-1]
    return old == new


print(list(filter(is_palindrome, range(500))))
